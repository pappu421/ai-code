======================================================================

Steepest hill climbing 
import random

initial_solution = [
    [2, 8, 3],
    [1, 5, 4],
    [7, 6, None]
]

best_solution = [
    [1, 2, 3],
    [8, None, 4],
    [7, 6, 5]
]

def objective_function(solution):
    # Calculate the number of correct positions
    num_correct = sum(1 for row1, row2 in zip(solution, best_solution) for elem1, elem2 in zip(row1, row2) if elem1 == elem2)
    return num_correct

def steepest_hill_climb(max_iterations, step_size, initial_solution):
    current_solution = initial_solution
    current_value = objective_function(current_solution)

    for _ in range(max_iterations):
        best_neighbor_value = float('-inf')
        best_neighbor_solution = None

        for i in range(len(current_solution)):
            for j in range(len(current_solution[0])):
                if current_solution[i][j] is None:  # Skip if the element is None
                    continue

                for direction in [(0, 1), (1, 0), (0, -1), (-1, 0)]:
                    new_i, new_j = i + direction[0], j + direction[1]
                    if 0 <= new_i < len(current_solution) and 0 <= new_j < len(current_solution[0]):
                        neighbor_solution = [row.copy() for row in current_solution]
                        neighbor_solution[i][j], neighbor_solution[new_i][new_j] = neighbor_solution[new_i][new_j], neighbor_solution[i][j]
                        neighbor_value = objective_function(neighbor_solution)
                        if neighbor_value > best_neighbor_value:
                            best_neighbor_value = neighbor_value
                            best_neighbor_solution = neighbor_solution

        if best_neighbor_value <= current_value:
            break

        current_solution = best_neighbor_solution
        current_value = best_neighbor_value

    return current_solution, current_value

max_iterations = 1000
step_size = 0.1
# Initialize the initial_solution randomly
initial_solution = [[random.randint(1, 8) if elem is not None else None for elem in row] for row in initial_solution]

best_solution, best_value = steepest_hill_climb(max_iterations, step_size, initial_solution)
print("Best Solution:", best_solution)
print("Objective Value at Best Solution:", best_value)

best_solution, best_value = steepest_hill_climb(max_iterations, step_size, initial_solution)
print("Best Solution:", best_solution)
print("Objective Value at Best Solution:", best_value)
