======================================================================

Steepest hill climbing 
import random

# Define your objective function here, you can replace this with your own function
def objective_function(x):
    return -(x ** 2)  # Example function to minimize x^2

# Steepest Hill Climb Algorithm
def steepest_hill_climb(max_iterations, step_size, initial_solution):
    current_solution = initial_solution
    current_value = objective_function(current_solution)

    for _ in range(max_iterations):
        neighbor_solutions = [current_solution + step_size, current_solution - step_size]
        neighbor_values = [objective_function(neighbor) for neighbor in neighbor_solutions]
        best_neighbor_value = max(neighbor_values)
        
        if best_neighbor_value <= current_value:
            break
        
        best_neighbor_index = neighbor_values.index(best_neighbor_value)
        current_solution = neighbor_solutions[best_neighbor_index]
        current_value = best_neighbor_value

    return current_solution, current_value

# Example usage
max_iterations = 1000
step_size = 0.1
initial_solution = random.uniform(-10, 10)

best_solution, best_value = steepest_hill_climb(max_iterations, step_size, initial_solution)
print("Best Solution:", best_solution)
print("Objective Value at Best Solution:", best_value)
